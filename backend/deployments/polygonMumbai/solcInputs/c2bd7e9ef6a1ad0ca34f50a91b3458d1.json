{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\n\npragma solidity ^0.8.20;\n\nimport {Context} from \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * The initial owner is set to the address provided by the deployer. This can\n * later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    /**\n     * @dev The caller account is not authorized to perform an operation.\n     */\n    error OwnableUnauthorizedAccount(address account);\n\n    /**\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\n     */\n    error OwnableInvalidOwner(address owner);\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\n     */\n    constructor(address initialOwner) {\n        if (initialOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(initialOwner);\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        if (owner() != _msgSender()) {\n            revert OwnableUnauthorizedAccount(_msgSender());\n        }\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        if (newOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n"
    },
    "contracts/Voting.sol": {
      "content": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.7;\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nerror cannot_add_new_candidate_voting_on_going_or_closed();\nerror candidate_already_exist_we_cannot_add_him_again();\nerror cannot_add_new_voter_voting_on_going();\nerror voter_already_exist_we_cannot_add_him_again();\nerror voting_is_not_ongoing();\nerror voter_not_exist_or_already_Voted();\nerror candidate_not_exist();\nerror cannot_start_voting_its_has_been();\nerror voting_is_not_closed_yet();\n\n// functionality needed\n// Add Candidates ( name, id)\n// cast Vote ( vote candidate by their ID)\n// Query Vote: Who has recieved how much\ncontract Voting is Ownable {\n    enum State {\n        REGISTRATION,\n        ONGOING,\n        CLOSED\n    }\n    State private state;\n    // Voter Detail Storage\n    address[] voters;\n    struct Voter {\n        string name;\n        bool voted;\n        bool registered;\n    }\n    mapping(address => Voter) addressToVoter;\n\n    // Candidate Detail Storage\n    address[] candidates;\n    struct Candidate {\n        string name;\n        uint id;\n        uint total_vote;\n        bool exist;\n    }\n    mapping(address => Candidate) addressToCandidate;\n    mapping(uint256 => address) idToCandidateAddress;\n    // voting details storage\n    mapping(address => Candidate) voterToCandidate;\n    mapping(address => uint256) candidateToNumVotes;\n    uint256 totalPeopleVoted;\n\n    constructor() Ownable(msg.sender) {\n        state = State.REGISTRATION;\n        totalPeopleVoted = 0;\n    }\n\n    function addCandidate(\n        address _candidateAddress,\n        string memory _name,\n        uint256 _id\n    ) public onlyOwner {\n        if (state != State.REGISTRATION)\n            revert cannot_add_new_candidate_voting_on_going_or_closed();\n        if (!addressToCandidate[_candidateAddress].exist)\n            revert candidate_already_exist_we_cannot_add_him_again();\n        candidates.push(_candidateAddress);\n        Candidate memory new_Candidate = Candidate(_name, _id, 0, true);\n        idToCandidateAddress[_id] = _candidateAddress;\n        addressToCandidate[_candidateAddress] = new_Candidate;\n    }\n\n    function addVoter(\n        address _voterAddress,\n        string memory _name\n    ) public onlyOwner {\n        if (state == State.ONGOING)\n            revert cannot_add_new_voter_voting_on_going();\n        if (addressToVoter[_voterAddress].registered)\n            revert voter_already_exist_we_cannot_add_him_again();\n        voters.push(_voterAddress);\n        addressToVoter[_voterAddress] = Voter(_name, false, true);\n    }\n\n    function voteTo(address _voterAddress, uint256 _id) public {\n        if (state != State.ONGOING) revert voting_is_not_ongoing();\n        if (\n            (!addressToVoter[_voterAddress].registered) ||\n            (addressToVoter[_voterAddress].voted)\n        ) revert voter_not_exist_or_already_Voted();\n        if (idToCandidateAddress[_id] == address(0))\n            revert candidate_not_exist();\n        address _candidateAddress = idToCandidateAddress[_id];\n        addressToCandidate[_candidateAddress].total_vote++;\n        totalPeopleVoted += 1;\n        addressToVoter[_voterAddress].voted = true;\n    }\n\n    function query(uint256 _id) public returns (uint256) {\n        return addressToCandidate[idToCandidateAddress[_id]].total_vote;\n    }\n\n    function startVoting() public onlyOwner {\n        if (state == State.CLOSED) revert cannot_start_voting_its_has_been();\n        state = State.ONGOING;\n    }\n\n    function stopVoting() public onlyOwner {\n        state = State.CLOSED;\n    }\n\n    function resetVoting() public {\n        if (state == State.CLOSED) revert voting_is_not_closed_yet();\n        totalPeopleVoted = 0;\n        for (uint256 i = 0; i < candidates.length; i++) {\n            addressToCandidate[candidates[i]].total_vote = 0;\n        }\n        for (uint256 i = 0; i < voters.length; i++) {\n            addressToVoter[voters[i]].voted = false;\n        }\n    }\n}\n"
    }
  },
  "settings": {
    "evmVersion": "paris",
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}